// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/NVIDIA/go-nvml/pkg/nvml"
	"sync"
)

// Ensure, that ExtendedVgpuTypeId does implement nvml.ExtendedVgpuTypeId.
// If this is not the case, regenerate this file with moq.
var _ nvml.ExtendedVgpuTypeId = &ExtendedVgpuTypeId{}

// ExtendedVgpuTypeId is a mock implementation of nvml.ExtendedVgpuTypeId.
//
//	func TestSomethingThatUsesExtendedVgpuTypeId(t *testing.T) {
//
//		// make and configure a mocked nvml.ExtendedVgpuTypeId
//		mockedExtendedVgpuTypeId := &ExtendedVgpuTypeId{
//			IDFunc: func() uint32 {
//				panic("mock out the ID method")
//			},
//		}
//
//		// use mockedExtendedVgpuTypeId in code that requires nvml.ExtendedVgpuTypeId
//		// and then make assertions.
//
//	}
type ExtendedVgpuTypeId struct {
	// IDFunc mocks the ID method.
	IDFunc func() uint32

	// calls tracks calls to the methods.
	calls struct {
		// ID holds details about calls to the ID method.
		ID []struct {
		}
	}
	lockID sync.RWMutex
}

// ID calls IDFunc.
func (mock *ExtendedVgpuTypeId) ID() uint32 {
	if mock.IDFunc == nil {
		panic("ExtendedVgpuTypeId.IDFunc: method is nil but ExtendedVgpuTypeId.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedExtendedVgpuTypeId.IDCalls())
func (mock *ExtendedVgpuTypeId) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}
